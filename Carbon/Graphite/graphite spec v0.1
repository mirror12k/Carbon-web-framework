
Graphite v0.1 specification
	lightly inspired by Meteor's SpaceBars

graphite templating markup:

	graphite blocks are directive blocks that start with '<?graphite' and end with '?>'
	these blocks may contain html tags inside but no directive tags

	words starting with a '#' are instructions to use an existing helper and any data between it and the '/#' ending it are passed to the helper

	declaring a template:
		the 'template' helper creates a new template of the given text, the first word specified indicates the name of the template:
			#template template_name
				hello world!
			/#
		template names may include a '::' to indicate a template namespace for better organization
		#template my_mod::my_temp
			<p>this is the template data</p>
		/#

	template variables:

		templates are allows to take data passed in and render it (it will automatically escapped with htmlentities):
			#template argy_template
				<h1>$title</h1>
			/#
		any variables referred to by '$<name>' will automatically hash dereference the default variable '$_'
		templates can also string the default variable directly instead of dereferencing it:
			#template bold_text
				<h1>$_</h1>
			/#

	template inclusion:

		templates can invoke other templates with or without arguments to render it inside by using '@:'
			#template invokes_another
				@template_name
			/#

		using an arrow, you can pass a variable argument or a single constant which becomes the default variable for the template
			#template invokes_with_data
				@bold_text->$my_title
				@bold_text->'hello world'
			/#

		to pass more data, square brackets can be used to pass an array reference of values,
		or curly brackets to pass a hash reference with the given keys
			#template invokes_complex
				@my_list_creator->[$my_mod, 'limestone', 'graphite']
				@complex_include->{arg1 => 'asdf', arg2 => $title, arg3 => $_}
			/#

	adding html and text to the document:

		any templates included outside of a template directive will be executed and their output will be sent to echo


	helper inclusion:

		other helpers can be invoked inside a template declaration:
			#template my_list_creator
				#foreach $items
					<li>$_</li>
				/#
			/#
		they can return text or code which will be included as part of the template


	other built-in helpers:
		the 'foreach' helper takes an array ref variable argument and executes it's internal block for each item in the array reference,
		setting '$_' to the current value of the iterator
			#foreach $_
				<p>i got a string: $_</p>
			/#

		the 'if' helper evals a given expression in parenthesis and executes the inside block only if the expression returns something truthy
			#if ($name eq 'john')
				hello there john!
			/#
		the 'if' helper and some other helpers set an else condition when executed
		specifically, it sets the else condition to true if it executed its block, and false if it didn't
		the 'else' helper reads the else condition and executes if it is true
			#if ('asdf' eq 'qwerty')
				will never be seen
			/#
			#else
				will always be seen
			/#
		additionally, the 'elsif' helper also reads the else condition and evals its expression if the else condition is met
		it sets the else condition to false only it the else condition was previously true and its expression evaluated to true,
		otherwise it sets the else condition to true
			#if ('asdf' eq 'qwerty')
				never seen
			/#
			#elsif ('asdf' eq lc 'ASDF')
				always seen!
			/#
			#else
				never seen again!
			/#
		the 'with' helper sets the default variable to the given value:
			#with $parent
				name: $name
				age: $age
			/#

	programmable helpers:
		additional helpers can be defined programmatically
		helpers can edit the environment, be sure to view the helper's documentation

API:
	each template is stored as Carbon::Graphite::Template within the Graphite engine
	they are accessible with get_template of the graphite plugin:
		my $template = $graphite->get_template('template_name')

	to set a template by name:
		$graphite->set_template('template_name' => $template)

	they can be individually rendered by calling render_template of the graphite plugin:
		echo $graphite->render_template('template_name')
	either the name of a template, or a template object may be passed
	an argument can be passed to act as the default variable in the template:
		echo $graphite->render_template(bold_text => 'hello world!')
		echo $graphite->render_template(some_template => [ qw/ a list of strings/ ])
		echo $graphite->render_template(some_template => { type => 'hash ref', explanation => 'arugments to templates' })

	helpers can also be accessed and created by name:
		my $helper = $graphite->get_helper('foreach')
		$graphite->set_helper(awesomness => $helper)
		# TODO: describe the helper function interface





